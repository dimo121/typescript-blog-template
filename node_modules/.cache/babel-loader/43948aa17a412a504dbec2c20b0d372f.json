{"ast":null,"code":"var _jsxFileName = \"/home/dimo/Desktop/Typescript/github-ts-blog/src/components/ModalComponent.tsx\";\nimport React from \"react\";\nimport Modal from \"react-modal\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n//type ChangeOption = Pick<IModalState, keyof IModalState>\nexport class ModalComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      email: '',\n      username: '',\n      error: '',\n      password: '',\n      registerMod: false\n    };\n    this.onChangeUsername = this.onChangeUsername.bind(this);\n    this.onChangePassword = this.onChangePassword.bind(this);\n    this.onChangeEmail = this.onChangeEmail.bind(this);\n    this.onSubmission = this.onSubmission.bind(this);\n  }\n\n  onChangeUsername(e) {\n    this.setState({\n      username: e.target.value\n    });\n  }\n\n  onChangeEmail(e) {\n    this.setState({\n      email: e.target.value\n    });\n  }\n\n  onChangePassword(e) {\n    this.setState({\n      password: e.target.value\n    });\n  }\n\n  onSubmission(e) {\n    e.preventDefault();\n\n    if (this.state.registerMod && !this.state.username || !this.state.password || !this.state.email) {\n      this.setState({\n        error: 'All fields are required'\n      });\n    } else {\n      this.props.onSubmission({\n        username: this.state.username,\n        email: this.state.email,\n        password: this.state.password\n      });\n      this.setState({\n        registerMod: false,\n        error: '',\n        email: '',\n        username: '',\n        password: ''\n      }); //change to clear modal with modalOpen once Cognito is configured, introduce spinner\n\n      this.props.clearModal();\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: !!this.props.modalOpen,\n      contentLabel: \"Login modal\",\n      onRequestClose: this.props.clearModal,\n      closeTimeoutMS: 0,\n      ariaHideApp: false,\n      className: \"modal\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"modal-title\",\n        children: [this.state.registerMod ? 'Registration details' : 'Sign in details', \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), this.state.error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-error\",\n        children: /*#__PURE__*/_jsxDEV(\"h5\", {\n          children: this.state.error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 60\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 31\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: this.onSubmission,\n        children: [this.state.registerMod && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"userName\",\n            children: \"Username:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"username\",\n            name: \"username\",\n            placeholder: \"username\",\n            style: {\n              fontSize: \"12px\",\n              height: \"1.5rem\",\n              width: \"22rem\"\n            },\n            onChange: this.onChangeUsername\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"email\",\n          children: \"Email:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"useremail\",\n          name: \"useremail\",\n          placeholder: \"email\",\n          style: {\n            fontSize: \"12px\",\n            height: \"1.5rem\",\n            width: \"22rem\"\n          },\n          onChange: this.onChangeEmail\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"password\",\n          children: \"Password:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"password\",\n          name: \"password\",\n          placeholder: \"password\",\n          style: {\n            fontSize: \"12px\",\n            height: \"1.5rem\",\n            width: \"22rem\"\n          },\n          onChange: this.onChangePassword\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 11\n        }, this), !this.state.registerMod && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"main-button\",\n          onClick: () => {\n            this.setState({\n              registerMod: false,\n              error: '',\n              email: '',\n              username: '',\n              password: ''\n            });\n            this.props.clearModal();\n          },\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"main-button\",\n          type: \"submit\",\n          children: \"Enter\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), !this.state.registerMod && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          children: \"If you are not a member please register\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"main-button\",\n          onClick: () => this.setState({\n            registerMod: true\n          }),\n          children: \"Register\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 39\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/home/dimo/Desktop/Typescript/github-ts-blog/src/components/ModalComponent.tsx"],"names":["React","Modal","ModalComponent","Component","constructor","props","state","email","username","error","password","registerMod","onChangeUsername","bind","onChangePassword","onChangeEmail","onSubmission","e","setState","target","value","preventDefault","clearModal","render","modalOpen","fontSize","height","width"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Modal from \"react-modal\";\nimport { NewUserInput } from \"../types/TypeDefs\";\n\n\ninterface IModalProps {\n  onSubmission: (user:NewUserInput) => void;\n  clearModal: () => void;\n  modalOpen: boolean;\n}\n\ninterface IModalState {\n  email: string;\n  username: string;\n  password:string;\n  error: string;\n  registerMod: boolean;\n}\n\ninterface CustomEvent {\n  target: HTMLInputElement\n}\n\n//type ChangeOption = Pick<IModalState, keyof IModalState>\n\nexport class ModalComponent extends React.Component<IModalProps,IModalState>{\n\n  constructor(props:IModalProps){\n    super(props);\n    \n    this.state = {\n      email: '',\n      username: '',\n      error: '',\n      password: '',\n      registerMod: false\n    }\n\n    this.onChangeUsername = this.onChangeUsername.bind(this)\n    this.onChangePassword = this.onChangePassword.bind(this)\n    this.onChangeEmail = this.onChangeEmail.bind(this)\n    this.onSubmission = this.onSubmission.bind(this)\n  }\n\n  private onChangeUsername(e:CustomEvent) {\n    this.setState({username:e.target.value});\n  };\n\n  private onChangeEmail(e:CustomEvent) {\n    this.setState({email: e.target.value})\n  }\n\n  private onChangePassword(e:CustomEvent) {\n    this.setState({password: e.target.value})\n  }\n\n  private onSubmission(e: React.FormEvent<HTMLFormElement>) {\n    e.preventDefault();\n    if((this.state.registerMod && !this.state.username) || !this.state.password || !this.state.email){\n      this.setState({error:'All fields are required'})\n    } else{\n\n      this.props.onSubmission({\n        username: this.state.username,\n        email: this.state.email,\n        password: this.state.password \n      });\n\n      this.setState({\n        registerMod: false,\n        error: '',\n        email:'',\n        username:'',\n        password:''});\n\n      //change to clear modal with modalOpen once Cognito is configured, introduce spinner\n      this.props.clearModal();\n    }\n  };\n\n  render(){\n\n    return (\n      <Modal\n        isOpen ={!!this.props.modalOpen}\n        contentLabel=\"Login modal\"\n        onRequestClose={this.props.clearModal}\n        closeTimeoutMS={0}\n        ariaHideApp={false}\n        className=\"modal\" \n      >\n        <h3 className=\"modal-title\">{ this.state.registerMod ? 'Registration details' : 'Sign in details' } </h3>\n        {this.state.error && (<div className=\"modal-error\"><h5>{this.state.error}</h5></div>)}\n        <form onSubmit={this.onSubmission}>\n          {this.state.registerMod && (\n            <>\n              <br />\n              <label htmlFor=\"userName\">Username:</label>\n              <br />\n                <input\n                  type=\"text\"\n                  id=\"username\"\n                  name=\"username\"\n                  placeholder=\"username\"\n                  style={{ fontSize: \"12px\", height: \"1.5rem\", width: \"22rem\" }}\n                  onChange={this.onChangeUsername}\n                ></input>\n              <br />\n            </>)}\n          <br />\n          <label htmlFor=\"email\">Email:</label>\n          <br />\n          <input\n            type=\"text\"\n            id=\"useremail\"\n            name=\"useremail\"\n            placeholder=\"email\"\n            style={{ fontSize: \"12px\", height: \"1.5rem\", width: \"22rem\" }}\n            onChange={this.onChangeEmail}\n          ></input>\n          <br />\n          <br />\n          <label htmlFor=\"password\">Password:</label>\n          <br />\n          <input\n            type=\"text\"\n            id=\"password\"\n            name=\"password\"\n            placeholder=\"password\"\n            style={{ fontSize: \"12px\", height: \"1.5rem\", width: \"22rem\" }}\n            onChange={this.onChangePassword}\n          ></input>\n          <br/>\n          {!this.state.registerMod && (\n            <div>\n              <br/>\n              <br/>\n            </div>\n          )}\n            <br/>\n            <br/>\n            <br/>\n            <br/>\n            <br/>\n            <br/>\n          <button className=\"main-button\" onClick={() => {\n            this.setState({\n              registerMod: false,\n              error: '',\n              email:'',\n              username:'',\n              password:''\n            });\n            this.props.clearModal();\n            }}>\n            Cancel\n          </button>\n          <button className=\"main-button\" type=\"submit\">Enter</button>\n        </form>\n        { !this.state.registerMod && (<div>\n          <h5>If you are not a member please register</h5>\n          <button className=\"main-button\" onClick={() => this.setState({registerMod:true})}>\n            Register\n          </button>\n        </div>)}\n      </Modal>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}