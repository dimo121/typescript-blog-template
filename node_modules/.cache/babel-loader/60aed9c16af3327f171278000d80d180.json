{"ast":null,"code":"import { Auth } from 'aws-amplify';\nimport Amplify from 'aws-amplify';\nimport { config } from './config';\n//import * as AWS from 'aws-sdk';\n//import { Credentials } from 'aws-sdk/lib/credentials';\nAmplify.configure({\n  Auth: {\n    mandatorySignIn: false,\n    region: config.REGION,\n    userPoolId: config.USER_POOL_ID,\n    userPoolWebClientId: config.APP_CLIENT_ID,\n    //identityPoolId: config.IDENTITY_POOL_ID,\n    authenticationFlowType: 'USER_SRP_AUTH'\n  }\n});\nexport class AuthService {\n  async login(email, password) {\n    try {\n      const user = await Auth.signIn(email, password);\n      return {\n        username: user.getUsername(),\n        user\n      };\n    } catch (error) {\n      return undefined;\n    }\n  }\n\n  async getUserAttributes(user) {\n    const result = [];\n    const attributes = await Auth.userAttributes(user.user);\n    result.push(...attributes);\n    return result;\n  }\n\n  async signUp(username, password, email) {\n    try {\n      const {\n        user\n      } = await Auth.signUp({\n        username,\n        password,\n        attributes: {\n          email\n        }\n      });\n      console.log(user);\n      return {\n        username: user.getUsername(),\n        user\n      };\n    } catch (error) {\n      console.log('error signing up:', error);\n      return undefined;\n    }\n  } // public async getAWSTemporaryCreds(user:CognitoUser){\n  //     const cognitoUserPool = `cognito-idp.${config.REGION}.amazonaws.com/${config.USER_POOL_ID}`;\n  //     AWS.config.credentials = new AWS.CognitoIdentityCredentials({\n  //         IdentityPoolId: config.IDENTITY_POOL_ID,\n  //         Logins: {\n  //             [cognitoUserPool]: user.getSignInUserSession()!.getIdToken().getJwtToken()\n  //         }\n  //     }, {\n  //         region: config.REGION\n  //     });\n  //     await this.refreshCredentials()\n  // }\n  // private async refreshCredentials(): Promise<void>{\n  //     return new Promise((resolve,reject) => {\n  //         (AWS.config.credentials as Credentials).refresh(err => {\n  //             if(err){\n  //                 reject(err)\n  //             } else{\n  //                 resolve()\n  //             }\n  //         })\n  //     })\n  // }\n\n\n}","map":{"version":3,"sources":["/home/dimo/Desktop/Typescript/github-ts-blog/src/services/AuthService.ts"],"names":["Auth","Amplify","config","configure","mandatorySignIn","region","REGION","userPoolId","USER_POOL_ID","userPoolWebClientId","APP_CLIENT_ID","authenticationFlowType","AuthService","login","email","password","user","signIn","username","getUsername","error","undefined","getUserAttributes","result","attributes","userAttributes","push","signUp","console","log"],"mappings":"AACA,SAASA,IAAT,QAAqB,aAArB;AACA,OAAOC,OAAP,MAAoB,aAApB;AACA,SAASC,MAAT,QAAuB,UAAvB;AAEA;AACA;AAGAD,OAAO,CAACE,SAAR,CAAkB;AACdH,EAAAA,IAAI,EAAE;AACFI,IAAAA,eAAe,EAAE,KADf;AAEFC,IAAAA,MAAM,EAAEH,MAAM,CAACI,MAFb;AAGFC,IAAAA,UAAU,EAAEL,MAAM,CAACM,YAHjB;AAIFC,IAAAA,mBAAmB,EAAEP,MAAM,CAACQ,aAJ1B;AAKF;AACAC,IAAAA,sBAAsB,EAAE;AANtB;AADQ,CAAlB;AAWA,OAAO,MAAMC,WAAN,CAAkB;AAEH,QAALC,KAAK,CAACC,KAAD,EAAgBC,QAAhB,EAAyD;AACvE,QAAG;AACC,YAAMC,IAAI,GAAG,MAAMhB,IAAI,CAACiB,MAAL,CAAYH,KAAZ,EAAmBC,QAAnB,CAAnB;AACA,aAAO;AACHG,QAAAA,QAAQ,EAAEF,IAAI,CAACG,WAAL,EADP;AAEHH,QAAAA;AAFG,OAAP;AAIH,KAND,CAME,OAAOI,KAAP,EAAa;AACX,aAAOC,SAAP;AACH;AACJ;;AAE6B,QAAjBC,iBAAiB,CAACN,IAAD,EAAqC;AAC/D,UAAMO,MAAwB,GAAG,EAAjC;AACA,UAAMC,UAAU,GAAG,MAAMxB,IAAI,CAACyB,cAAL,CAAoBT,IAAI,CAACA,IAAzB,CAAzB;AACAO,IAAAA,MAAM,CAACG,IAAP,CAAY,GAAGF,UAAf;AACA,WAAOD,MAAP;AACH;;AAEkB,QAANI,MAAM,CAACT,QAAD,EAAiBH,QAAjB,EAAiCD,KAAjC,EAAwE;AACvF,QAAI;AACA,YAAM;AAAEE,QAAAA;AAAF,UAAW,MAAMhB,IAAI,CAAC2B,MAAL,CAAY;AAC/BT,QAAAA,QAD+B;AAE/BH,QAAAA,QAF+B;AAG/BS,QAAAA,UAAU,EAAE;AACRV,UAAAA;AADQ;AAHmB,OAAZ,CAAvB;AAOAc,MAAAA,OAAO,CAACC,GAAR,CAAYb,IAAZ;AACA,aAAO;AACHE,QAAAA,QAAQ,EAAEF,IAAI,CAACG,WAAL,EADP;AAEHH,QAAAA;AAFG,OAAP;AAIH,KAbD,CAaE,OAAOI,KAAP,EAAc;AACZQ,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCT,KAAjC;AACA,aAAOC,SAAP;AACH;AACJ,GAvCoB,CAyCrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAhEqB","sourcesContent":["import { User, UserAttribute } from '../types/TypeDefs';\nimport { Auth } from 'aws-amplify';\nimport Amplify from 'aws-amplify';\nimport { config } from './config';\nimport { CognitoUser } from '@aws-amplify/auth';\n//import * as AWS from 'aws-sdk';\n//import { Credentials } from 'aws-sdk/lib/credentials';\n\n\nAmplify.configure({\n    Auth: {\n        mandatorySignIn: false,\n        region: config.REGION,\n        userPoolId: config.USER_POOL_ID,\n        userPoolWebClientId: config.APP_CLIENT_ID,\n        //identityPoolId: config.IDENTITY_POOL_ID,\n        authenticationFlowType: 'USER_SRP_AUTH'\n    }\n})\n\nexport class AuthService {\n\n    public async login(email: string, password:string): Promise<User|undefined>{\n        try{\n            const user = await Auth.signIn(email, password) as CognitoUser;\n            return {\n                username: user.getUsername(),\n                user\n            };\n        } catch (error){\n            return undefined;\n        }\n    }\n\n    public async getUserAttributes(user: User):Promise<UserAttribute[]>{\n        const result : UserAttribute[] = []\n        const attributes = await Auth.userAttributes(user.user);\n        result.push(...attributes);\n        return result;\n    }\n\n    public async signUp(username:string,password:string,email:string): Promise<User|undefined> {\n        try {\n            const { user } = await Auth.signUp({\n                username,\n                password,\n                attributes: {\n                    email\n                }\n            });\n            console.log(user);\n            return {\n                username: user.getUsername(),\n                user\n            };\n        } catch (error) {\n            console.log('error signing up:', error);\n            return undefined;\n        }\n    }\n\n    // public async getAWSTemporaryCreds(user:CognitoUser){\n    //     const cognitoUserPool = `cognito-idp.${config.REGION}.amazonaws.com/${config.USER_POOL_ID}`;\n    //     AWS.config.credentials = new AWS.CognitoIdentityCredentials({\n    //         IdentityPoolId: config.IDENTITY_POOL_ID,\n    //         Logins: {\n    //             [cognitoUserPool]: user.getSignInUserSession()!.getIdToken().getJwtToken()\n    //         }\n    //     }, {\n    //         region: config.REGION\n    //     });\n    //     await this.refreshCredentials()\n    // }\n\n    // private async refreshCredentials(): Promise<void>{\n    //     return new Promise((resolve,reject) => {\n    //         (AWS.config.credentials as Credentials).refresh(err => {\n    //             if(err){\n    //                 reject(err)\n    //             } else{\n    //                 resolve()\n    //             }\n    //         })\n    //     })\n    // }\n\n}\n"]},"metadata":{},"sourceType":"module"}